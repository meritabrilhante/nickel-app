// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  first_name     String
  last_name      String
  email          String        @unique
  password       String
  institute      String?
  course         String?
  user_type      String?
  user_situation UserSituation
  description    String?

  token      Token[]
  session    Session[]
  rooms      Room[]
  //room_user    Room_user[]
  //awnser       Awnser[]
  discussion Discussion[]
  //user_emblems User_emblems[]
}

enum UserSituation {
  USER
  ADMIN
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

model Report {
  id          String   @id @default(uuid())
  type        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Room {
  id          String     @id @default(uuid())
  title       String
  description String
  institute   String
  visibility  Visibility
  password    String?
  createdAt   DateTime   @default(now())

  discussion Discussion[]
  //room_manager Room_manager[]
  //room_report  Room_report[]
  //room_user    Room_user[]

  user        User     @relation(fields: [creator], references: [id])
  creator     String
  category    Category @relation(fields: [category_id], references: [id])
  category_id String
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  discussion Discussion[]
  room       Room[]
}

model Discussion {
  id                   String   @id @default(uuid())
  title                String
  subject              String?
  question_description String?
  createdAt            DateTime @default(now())
  belong_in_room       Int
  status               Status

  //awnser              Awnser[]
  category Category[]
  //discussion_reaction Discussion_reaction[]
  //discussion_report   Discussion_report[]

  // Avaliar necessidade de 'subject_author'
  //user           User   @relation(fields: [subject_author], references: [id], name: "author")
  //subject_author String

  user       User   @relation(fields: [created_by], references: [id])
  created_by String

  room    Room   @relation(fields: [room_id], references: [id])
  room_id String
}

enum Status {
  ARCHIVED
  ACTIVE
}

model Emblem {
  id          String    @id @default(uuid())
  name        String?
  description String?
  createdAt   DateTime? @default(now())
  extinctAt   DateTime
}
