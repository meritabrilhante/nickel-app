// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  first_name  String
  last_name   String
  email       String    @unique
  password    String
  institution String?
  course      String?
  user_type   String?
  user_role   UserRole?
  description String?

  tokens              Token[]
  sessions            Session[]
  rooms               Room[]
  room_users          RoomUser[]
  room_manager        RoomManager[]
  room_report         RoomReport[]
  room_inviter        RoomInvite[]         @relation("inviterId")
  room_invited        RoomInvite[]         @relation("guestId")
  answers             Answer[]
  answer_reaction     AnswerReaction[]
  discussions         Discussion[]
  discussion_reaction DiscussionReaction[]
  discussion_report   DiscussionReport[]
  user_emblems        UserEmblem[]
}

enum UserRole {
  USER
  ADMIN
}

model UserEmblem {
  id              String        @id @default(uuid())
  acquisition_at  DateTime      @default(now())
  show_in_profile ShowInProfile

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  emblem    Emblem @relation(fields: [emblem_id], references: [id])
  emblem_id String
}

enum ShowInProfile {
  YES
  NO
}

model Session {
  id                   String    @id @default(uuid())
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  expires_at           DateTime?
  handle               String    @unique
  hashed_session_token String?
  anti_csrf_token      String?
  public_data          String?
  private_data         String?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String
}

model Token {
  id           String   @id @default(uuid())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  hashed_token String
  type         String
  expires_at   DateTime
  sent_to      String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@unique([hashed_token, type])
}

model Report {
  id          String   @id @default(uuid())
  type        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Room {
  id          String     @id @default(uuid())
  title       String
  description String
  institute   String
  visibility  Visibility
  password    String?
  created_at  DateTime   @default(now())

  discussions   Discussion[]
  room_managers RoomManager[]
  room_report   RoomReport[]
  room_users    RoomUser[]
  room_invite   RoomInvite[]

  user         User           @relation(fields: [creator_id], references: [id])
  creator_id   String
  category     Category       @relation(fields: [category_id], references: [id])
  category_id  String
  RoomCategory RoomCategory[]
}

model RoomInvite {
  id String @id @default(uuid())

  user       User   @relation("inviterId", fields: [inviter_id], references: [id])
  inviter_id String

  guest    User   @relation("guestId", fields: [guest_id], references: [id])
  guest_id String

  room    Room   @relation(fields: [room_id], references: [id])
  room_id String
}

model RoomReport {
  id          String     @id @default(uuid())
  report_type ReportType
  comment     String?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  room    Room   @relation(fields: [room_id], references: [id])
  room_id String
}

model RoomManager {
  id   String @id @default(uuid())
  role Role

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  room    Room   @relation(fields: [room_id], references: [id])
  room_id String
}

enum Role {
  ADMIN
  SUPERADMIN
  CREATOR
}

model RoomUser {
  id           String   @id @default(uuid())
  member_since DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  room    Room   @relation(fields: [room_id], references: [id])
  room_id String
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  discussions        Discussion[]
  rooms              Room[]
  RoomCategory       RoomCategory[]
  DiscussionCategory DiscussionCategory[]
}

model Discussion {
  id          String   @id @default(uuid())
  title       String
  subject     String
  description String
  status      Status
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  answers              Answer[]
  discussion_reactions DiscussionReaction[]
  discussion_reports   DiscussionReport[]

  user       User   @relation(fields: [created_by], references: [id])
  created_by String

  room    Room   @relation(fields: [room_id], references: [id])
  room_id String

  category           Category             @relation(fields: [category_id], references: [id])
  category_id        String
  DiscussionCategory DiscussionCategory[]
}

enum Status {
  ARCHIVED
  ACTIVE
}

model Emblem {
  id          String    @id @default(uuid())
  name        String?
  description String?
  created_at  DateTime? @default(now())
  extinct_at  DateTime

  user_emblems UserEmblem[]
}

model Answer {
  id          String   @id @default(uuid())
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  answer_reactions AnswerReaction[]

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  discussion    Discussion @relation(fields: [discussion_id], references: [id])
  discussion_id String
}

model AnswerReaction {
  id            String       @id @default(uuid())
  reaction_type ReactionType
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  answer    Answer @relation(fields: [answer_id], references: [id])
  answer_id String
}

model DiscussionReaction {
  id            String       @id @default(uuid())
  reaction_type ReactionType

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  discussion    Discussion @relation(fields: [discussion_id], references: [id])
  discussion_id String
}

enum ReactionType {
  LIKE
  DISLIKE
}

model DiscussionReport {
  id          String     @id @default(uuid())
  report_type ReportType
  comment     String?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  discussion    Discussion @relation(fields: [discussion_id], references: [id])
  discussion_id String
}

model DiscussionCategory {
  id String @id @default(uuid())

  discussion    Discussion @relation(fields: [discussion_id], references: [id])
  discussion_id String

  category    Category @relation(fields: [category_id], references: [id])
  category_id String
}

model RoomCategory {
  id String @id @default(uuid())

  room    Room   @relation(fields: [room_id], references: [id])
  room_id String

  category    Category @relation(fields: [category_id], references: [id])
  category_id String
}

enum ReportType {
  OFFENSIVE
  TENDENTIOUS
  SPAM
}
